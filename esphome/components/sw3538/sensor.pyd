import esphome.codegen as cg
import esphome.config_validation as cv
from esphome.components import i2c, sensor
from esphome.const import (
    CONF_ID,
    CONF_TEMPERATURE,
    DEVICE_CLASS_CURRENT,
    DEVICE_CLASS_POWER,
    DEVICE_CLASS_VOLTAGE,
    DEVICE_CLASS_TEMPERATURE,
    STATE_CLASS_MEASUREMENT,
    UNIT_VOLT,
    UNIT_AMPERE,
    UNIT_WATT,
    UNIT_CELSIUS,
)

DEPENDENCIES = ["i2c"]

CONF_VIN_VOLTAGE = "vin_voltage"
CONF_VOUT_VOLTAGE = "vout_voltage"
CONF_USBC_CURRENT = "usbc_current"
CONF_USBA_CURRENT = "usba_current"
CONF_USBC_POWER = "usbc_power"
CONF_USBA_POWER = "usba_power"

sw3538_ns = cg.esphome_ns.namespace("sw3538")
SW3538Component = sw3538_ns.class_(
    "SW3538Component", cg.PollingComponent, i2c.I2CDevice
)

CONFIG_SCHEMA = (
    cv.Schema(
        {
            cv.GenerateID(): cv.declare_id(SW3538Component),
            cv.Optional(CONF_VIN_VOLTAGE): sensor.sensor_schema(
                unit_of_measurement=UNIT_VOLT,
                accuracy_decimals=2,
                device_class=DEVICE_CLASS_VOLTAGE,
                state_class=STATE_CLASS_MEASUREMENT,
            ),
            cv.Optional(CONF_VOUT_VOLTAGE): sensor.sensor_schema(
                unit_of_measurement=UNIT_VOLT,
                accuracy_decimals=2,
                device_class=DEVICE_CLASS_VOLTAGE,
                state_class=STATE_CLASS_MEASUREMENT,
            ),
            cv.Optional(CONF_USBC_CURRENT): sensor.sensor_schema(
                unit_of_measurement=UNIT_AMPERE,
                accuracy_decimals=3,
                device_class=DEVICE_CLASS_CURRENT,
                state_class=STATE_CLASS_MEASUREMENT,
            ),
            cv.Optional(CONF_USBA_CURRENT): sensor.sensor_schema(
                unit_of_measurement=UNIT_AMPERE,
                accuracy_decimals=3,
                device_class=DEVICE_CLASS_CURRENT,
                state_class=STATE_CLASS_MEASUREMENT,
            ),
            cv.Optional(CONF_USBC_POWER): sensor.sensor_schema(
                unit_of_measurement=UNIT_WATT,
                accuracy_decimals=2,
                device_class=DEVICE_CLASS_POWER,
                state_class=STATE_CLASS_MEASUREMENT,
            ),
            cv.Optional(CONF_USBA_POWER): sensor.sensor_schema(
                unit_of_measurement=UNIT_WATT,
                accuracy_decimals=2,
                device_class=DEVICE_CLASS_POWER,
                state_class=STATE_CLASS_MEASUREMENT,
            ),
            cv.Optional(CONF_TEMPERATURE): sensor.sensor_schema(
                unit_of_measurement=UNIT_CELSIUS,
                accuracy_decimals=2,
                device_class=DEVICE_CLASS_TEMPERATURE,
                state_class=STATE_CLASS_MEASUREMENT,
            ),
        }
    )
    .extend(cv.polling_component_schema("5s"))
    .extend(i2c.i2c_device_schema(0x3c))
)


async def to_code(config):
    var = cg.new_Pvariable(config[CONF_ID])
    await cg.register_component(var, config)
    await i2c.register_i2c_device(var, config)

    if CONF_VIN_VOLTAGE in config:
        sens = await sensor.new_sensor(config[CONF_VIN_VOLTAGE])
        cg.add(var.set_vin_voltage_sensor(sens))

    if CONF_VOUT_VOLTAGE in config:
        sens = await sensor.new_sensor(config[CONF_VOUT_VOLTAGE])
        cg.add(var.set_vout_voltage_sensor(sens))

    if CONF_USBC_CURRENT in config:
        sens = await sensor.new_sensor(config[CONF_USBC_CURRENT])
        cg.add(var.set_usbc_current_sensor(sens))

    if CONF_USBA_CURRENT in config:
        sens = await sensor.new_sensor(config[CONF_USBA_CURRENT])
        cg.add(var.set_usba_current_sensor(sens))

    if CONF_USBC_POWER in config:
        sens = await sensor.new_sensor(config[CONF_USBC_POWER])
        cg.add(var.set_usbc_power_sensor(sens))

    if CONF_USBA_POWER in config:
        sens = await sensor.new_sensor(config[CONF_USBA_POWER])
        cg.add(var.set_usba_power_sensor(sens))

    if CONF_TEMPERATURE in config:
        sens = await sensor.new_sensor(config[CONF_TEMPERATURE])
        cg.add(var.set_temp_sensor(sens))